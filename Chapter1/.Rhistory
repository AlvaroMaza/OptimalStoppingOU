profit_crossing_values <- c()
profit_expiration_values <- c()
testing_length <- 60
# Loop to update start variable and plot results
for (start in seq(0, length(OU_path) - 260, by = testing_length)) {
# Define training and testing length
training_length <- start + 200
# Extract training and testing data
training_data <- OU_path[start + 1:(training_length - start)]
testing_data <- OU_path[(training_length + 1):(training_length + testing_length)]
# Infer the boundary using the training data
inferred_results <- infer_boundary_gold_silver(training_data, delta = 1/252, z_alpha = 0.1, partition_length = testing_length)
#print(inferred_results$boundary_est)
# Define the split index
split_index <- training_length
# Create a filename for each plot
plot_filename <- paste0("gold_silver_", start, ".pdf")
# Open a PDF device
pdf(plot_filename, width = 12, height = 7)
# Plot the boundary
plot_boundary_gold_silver(OU_path, inferred_results, split_index, date_line)
# Close the PDF device
dev.off()
# Check the relationship between the first testing data point and the inferred boundary
initial_test_value <- testing_data[1]
initial_boundary_value <- inferred_results$boundary_est[1]
if (initial_test_value > initial_boundary_value) {
# Strategy 1: Exit on Crossing
for (i in 1:length(testing_data)) {
if (testing_data[i] < inferred_results$boundary_est[i]) {
profit_crossing <- inferred_results$est_theta$mu - inferred_results$boundary_est[i]
total_profit_crossing <- total_profit_crossing + profit_crossing
break
}
}
# Strategy 2: Exit on Crossing lower bound
for (i in 1:length(testing_data)) {
if (testing_data[i] < inferred_results$lower_bound[i]) {
profit_crossing_lower <- inferred_results$est_theta$mu - inferred_results$lower_bound[i]
total_profit_crossing_lower_bound <- total_profit_crossing_lower_bound + profit_crossing_lower
break
}
}
# Strategy 3: Hold Until Expiration
last_test_value <- testing_data[length(testing_data)]
profit_expiration <- max(0,inferred_results$est_theta$mu - last_test_value)
total_profit_expiration <- total_profit_expiration + profit_expiration
# Append profits to the vectors
profit_crossing_values <- c(profit_crossing_values, total_profit_crossing)
profit_expiration_values <- c(profit_expiration_values, total_profit_expiration)
cat("Profit crossing:", total_profit_crossing, ", Profit expiration:", total_profit_expiration, "\n")
}
}
cat("Total Profit from Exit on Crossing:", total_profit_crossing, "\n")
cat("Total Profit from Exit on Crossing Lower Bound:", total_profit_crossing_lower_bound, "\n")
cat("Total Profit from Holding Until Expiration:", total_profit_expiration, "\n")
# Define the indices for the relevant dates
start_index <- 360
date_indices <- seq(start_index, start_index + 60 * (length(profit_crossing_values) - 1), by = 60)
# Extract the corresponding dates for the profits
plot_dates <- date_line[date_indices]
# Plot OU_path over time with the primary y-axis
plot(date_line, OU_path, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "OU Path Value")
# Create a secondary y-axis for the profit
par(new = TRUE)
# Plot the profit data using the secondary y-axis
plot(plot_dates, profit_crossing_values, type = "l", col = "blue", lwd = 2,
xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = range(c(profit_crossing_values, profit_expiration_values)))
# Add the profit expiration line
lines(plot_dates, profit_expiration_values, type = "l", col = "red", lwd = 2)
# Add secondary y-axis labels
axis(4)
# Initialize variables to accumulate total profits for each strategy
total_profit_crossing <- 0
#total_profit_crossing_upper_bound <- 0
total_profit_crossing_lower_bound <- 0
total_profit_expiration <- 0
# Initialize vectors to store profits for each iteration
profit_crossing_values <- c()
profit_expiration_values <- c()
testing_length <- 60
# Loop to update start variable and plot results
for (start in seq(0, length(OU_path) - 260, by = testing_length)) {
# Define training and testing length
training_length <- start + 200
# Extract training and testing data
training_data <- OU_path[start + 1:(training_length - start)]
testing_data <- OU_path[(training_length + 1):(training_length + testing_length)]
# Infer the boundary using the training data
inferred_results <- infer_boundary_gold_silver(training_data, delta = 1/252, z_alpha = 0.1, partition_length = testing_length)
#print(inferred_results$boundary_est)
# Define the split index
split_index <- training_length
# Create a filename for each plot
plot_filename <- paste0("gold_silver_", start, ".pdf")
# Open a PDF device
pdf(plot_filename, width = 12, height = 7)
# Plot the boundary
plot_boundary_gold_silver(OU_path, inferred_results, split_index, date_line)
# Close the PDF device
dev.off()
# Check the relationship between the first testing data point and the inferred boundary
initial_test_value <- testing_data[1]
initial_boundary_value <- inferred_results$boundary_est[1]
if (initial_test_value > initial_boundary_value) {
# Strategy 1: Exit on Crossing
for (i in 1:length(testing_data)) {
if (testing_data[i] < inferred_results$boundary_est[i]) {
profit_crossing <- inferred_results$est_theta$mu - inferred_results$boundary_est[i]
total_profit_crossing <- total_profit_crossing + profit_crossing
break
}
}
# Strategy 2: Exit on Crossing lower bound
for (i in 1:length(testing_data)) {
if (testing_data[i] < inferred_results$lower_bound[i]) {
profit_crossing_lower <- inferred_results$est_theta$mu - inferred_results$lower_bound[i]
total_profit_crossing_lower_bound <- total_profit_crossing_lower_bound + profit_crossing_lower
break
}
}
# Strategy 3: Hold Until Expiration
last_test_value <- testing_data[length(testing_data)]
profit_expiration <- max(0,inferred_results$est_theta$mu - last_test_value)
total_profit_expiration <- total_profit_expiration + profit_expiration
}
# Append profits to the vectors
profit_crossing_values <- c(profit_crossing_values, total_profit_crossing)
profit_expiration_values <- c(profit_expiration_values, total_profit_expiration)
cat("Profit crossing:", total_profit_crossing, ", Profit expiration:", total_profit_expiration, "\n")
}
cat("Total Profit from Exit on Crossing:", total_profit_crossing, "\n")
cat("Total Profit from Exit on Crossing Lower Bound:", total_profit_crossing_lower_bound, "\n")
cat("Total Profit from Holding Until Expiration:", total_profit_expiration, "\n")
# Define the indices for the relevant dates
start_index <- 360
date_indices <- seq(start_index, start_index + 60 * (length(profit_crossing_values) - 1), by = 60)
# Extract the corresponding dates for the profits
plot_dates <- date_line[date_indices]
# Plot OU_path over time with the primary y-axis
plot(date_line, OU_path, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "OU Path Value")
# Create a secondary y-axis for the profit
par(new = TRUE)
# Plot the profit data using the secondary y-axis
plot(plot_dates, profit_crossing_values, type = "l", col = "blue", lwd = 2,
xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = range(c(profit_crossing_values, profit_expiration_values)))
# Add the profit expiration line
lines(plot_dates, profit_expiration_values, type = "l", col = "red", lwd = 2)
# Add secondary y-axis labels
axis(4)
# Label the secondary y-axis
mtext("Total Profit", side = 4, line = 3)
plot_dates
# Plot OU_path over time with the primary y-axis
plot(date_line, OU_path, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "OU Path Value")
# Create a secondary y-axis for the profit
par(new = TRUE)
# Plot the profit data using the secondary y-axis
plot(profit_crossing_values, type = "l", col = "blue", lwd = 2,
xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = range(c(profit_crossing_values, profit_expiration_values)))
# Add the profit expiration line
lines(profit_expiration_values, type = "l", col = "red", lwd = 2)
profit_crossing_values <- c(rep(0, 6), profit_crossing_values)
profit_expiration_values <- c(rep(0, 6), profit_expiration_values)
# Define the indices for the relevant dates
start_index <- 360
date_indices <- seq(start_index, start_index + 60 * (length(profit_crossing_values) - 1), by = 60)
# Extract the corresponding dates for the profits
plot_dates <- date_line[date_indices]
# Plot OU_path over time with the primary y-axis
plot(date_line, OU_path, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "OU Path Value")
# Create a secondary y-axis for the profit
par(new = TRUE)
# Plot the profit data using the secondary y-axis
plot(profit_crossing_values, type = "l", col = "blue", lwd = 2,
xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = range(c(profit_crossing_values, profit_expiration_values)))
# Add the profit expiration line
lines(profit_expiration_values, type = "l", col = "red", lwd = 2)
profit_crossing_values
profit_crossing_values <- c(rep(0, 5), profit_crossing_values)
profit_expiration_values <- c(rep(0, 5), profit_expiration_values)
# Initialize variables to accumulate total profits for each strategy
total_profit_crossing <- 0
#total_profit_crossing_upper_bound <- 0
total_profit_crossing_lower_bound <- 0
total_profit_expiration <- 0
# Initialize vectors to store profits for each iteration
profit_crossing_values <- c()
profit_expiration_values <- c()
testing_length <- 60
# Loop to update start variable and plot results
for (start in seq(0, length(OU_path) - 260, by = testing_length)) {
# Define training and testing length
training_length <- start + 200
# Extract training and testing data
training_data <- OU_path[start + 1:(training_length - start)]
testing_data <- OU_path[(training_length + 1):(training_length + testing_length)]
# Infer the boundary using the training data
inferred_results <- infer_boundary_gold_silver(training_data, delta = 1/252, z_alpha = 0.1, partition_length = testing_length)
#print(inferred_results$boundary_est)
# Define the split index
split_index <- training_length
# Create a filename for each plot
plot_filename <- paste0("gold_silver_", start, ".pdf")
# Open a PDF device
pdf(plot_filename, width = 12, height = 7)
# Plot the boundary
plot_boundary_gold_silver(OU_path, inferred_results, split_index, date_line)
# Close the PDF device
dev.off()
# Check the relationship between the first testing data point and the inferred boundary
initial_test_value <- testing_data[1]
initial_boundary_value <- inferred_results$boundary_est[1]
if (initial_test_value > initial_boundary_value) {
# Strategy 1: Exit on Crossing
for (i in 1:length(testing_data)) {
if (testing_data[i] < inferred_results$boundary_est[i]) {
profit_crossing <- inferred_results$est_theta$mu - inferred_results$boundary_est[i]
total_profit_crossing <- total_profit_crossing + profit_crossing
break
}
}
# Strategy 2: Exit on Crossing lower bound
for (i in 1:length(testing_data)) {
if (testing_data[i] < inferred_results$lower_bound[i]) {
profit_crossing_lower <- inferred_results$est_theta$mu - inferred_results$lower_bound[i]
total_profit_crossing_lower_bound <- total_profit_crossing_lower_bound + profit_crossing_lower
break
}
}
# Strategy 3: Hold Until Expiration
last_test_value <- testing_data[length(testing_data)]
profit_expiration <- max(0,inferred_results$est_theta$mu - last_test_value)
total_profit_expiration <- total_profit_expiration + profit_expiration
}
# Append profits to the vectors
profit_crossing_values <- c(profit_crossing_values, total_profit_crossing)
profit_expiration_values <- c(profit_expiration_values, total_profit_expiration)
cat("Profit crossing:", total_profit_crossing, ", Profit expiration:", total_profit_expiration, "\n")
}
cat("Total Profit from Exit on Crossing:", total_profit_crossing, "\n")
cat("Total Profit from Exit on Crossing Lower Bound:", total_profit_crossing_lower_bound, "\n")
cat("Total Profit from Holding Until Expiration:", total_profit_expiration, "\n")
profit_crossing_values <- c(rep(0, 5), profit_crossing_values)
profit_expiration_values <- c(rep(0, 5), profit_expiration_values)
# Define the indices for the relevant dates
start_index <- 360
date_indices <- seq(start_index, start_index + 60 * (length(profit_crossing_values) - 1), by = 60)
# Extract the corresponding dates for the profits
plot_dates <- date_line[date_indices]
# Plot OU_path over time with the primary y-axis
plot(date_line, OU_path, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "OU Path Value")
# Create a secondary y-axis for the profit
par(new = TRUE)
# Plot the profit data using the secondary y-axis
plot(profit_crossing_values, type = "l", col = "blue", lwd = 2,
xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = range(c(profit_crossing_values, profit_expiration_values)))
# Add the profit expiration line
lines(profit_expiration_values, type = "l", col = "red", lwd = 2)
# Add secondary y-axis labels
axis(4)
# Plot OU_path over time with the primary y-axis
plot(date_line, OU_path, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "OU Path Value")
# Create a secondary y-axis for the profit
par(new = TRUE)
# Plot the profit data using the secondary y-axis
plot(profit_crossing_values, type = "l", col = "blue", lwd = 2,
xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = range(c(profit_crossing_values, profit_expiration_values)))
# Add the profit expiration line
lines(profit_expiration_values, type = "l", col = "red", lwd = 2)
# Add secondary y-axis labels
axis(4)
pdf("profit_over_time", width = 12, height = 7)
# Plot OU_path over time with the primary y-axis
plot(date_line, OU_path, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "OU Path Value")
# Create a secondary y-axis for the profit
par(new = TRUE)
# Plot the profit data using the secondary y-axis
plot(profit_crossing_values, type = "l", col = "blue", lwd = 2,
xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = range(c(profit_crossing_values, profit_expiration_values)))
# Add the profit expiration line
lines(profit_expiration_values, type = "l", col = "red", lwd = 2)
# Add secondary y-axis labels
axis(4)
dev.off()
pdf("profit_over_time.pdf", width = 12, height = 7)
# Plot OU_path over time with the primary y-axis
plot(date_line, OU_path, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "OU Path Value")
# Create a secondary y-axis for the profit
par(new = TRUE)
# Plot the profit data using the secondary y-axis
plot(profit_crossing_values, type = "l", col = "blue", lwd = 2,
xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = range(c(profit_crossing_values, profit_expiration_values)))
# Add the profit expiration line
lines(profit_expiration_values, type = "l", col = "red", lwd = 2)
# Add secondary y-axis labels
axis(4)
dev.off()
# Define parameters
S <- 100  # Current price of the underlying asset
K <- 100  # Strike price of the put option
# Create a sequence of possible stock prices at expiration
stock_prices <- seq(0, 200, by = 1)
# Calculate the payoff of the put option at expiration
put_payoff <- pmax(K - stock_prices, 0)
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Payoff",
main = "Payoff Diagram for a European Put Option")
# Define parameters
S <- 100  # Current price of the underlying asset
K <- 100  # Strike price of the put option
# Create a sequence of possible stock prices at expiration
stock_prices <- seq(5, 150, by = 1)
# Calculate the payoff of the put option at expiration
put_payoff <- pmax(K - stock_prices, 0)
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Payoff",
main = "Payoff Diagram for a European Put Option")
# Create a sequence of possible stock prices at expiration
stock_prices <- seq(50, 150, by = 1)
# Calculate the payoff of the put option at expiration
put_payoff <- pmax(K - stock_prices, 0)
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Payoff",
main = "Payoff Diagram for a European Put Option")
# Add a line for the x-axis
abline(h = 0, col = "black")
# Add a vertical line for the strike price
abline(v = K, col = "red", lty = 2)
# Add annotations
text(x = K, y = max(put_payoff), labels = paste("Strike Price (K =", K, ")"), pos = 4, col = "red")
text(x = max(stock_prices), y = max(put_payoff), labels = "Put Payoff", pos = 4, col = "blue")
# Define parameters
S <- 100  # Current price of the underlying asset
K <- 100  # Strike price of the put option
# Create a sequence of possible stock prices at expiration
stock_prices <- seq(50, 150, by = 1)
# Calculate the payoff of the put option at expiration
put_payoff <- pmax(K - stock_prices, 0)
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Payoff",
main = "Payoff Diagram for a European Put Option")
# Calculate the payoff of the put option at expiration
put_payoff <- pmax(K - stock_prices, 0) - 10
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Payoff",
main = "Payoff Diagram for a European Put Option")
# Calculate the payoff of the put option at expiration
put_payoff <- pmax(K - stock_prices, 0) - 10
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Payoff",
main = "Payoff Diagram for a European Put Option")
# Add a line for the x-axis
abline(h = 0, col = "black")
# Define parameters
K <- 100  # Strike price of the put option
# Create a sequence of possible stock prices at expiration
stock_prices <- seq(50, 150, by = 1)
# Calculate the payoff of the put option at expiration
put_payoff <- pmax(K - stock_prices, 0) - 10
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Payoff")
# Add a line for the x-axis
abline(h = 0, col = "black")
# Calculate the payoff of the call option at expiration
call_payoff <- pmax(stock_prices - K, 0) - 10
# Plot the payoff diagram
plot(stock_prices, call_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Payoff")
# Add a line for the x-axis
abline(h = 0, col = "black")
setwd("C:/Users/alvar/Desktop/OptimalStoppingOU/Chapter1")
# Create a sequence of possible stock prices at expiration
stock_prices <- seq(50, 150, by = 1)
# Calculate the payoff of the put option at expiration
put_payoff <- pmax(K - stock_prices, 0) - 10
pdf("put.df", widht=12, height = 7)
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Profit")
pdf("put.df", width=12, height = 7)
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Profit")
# Add a line for the x-axis
abline(h = 0, col = "black")
dev.off
dev.off()
pdf("put.pdf", width=12, height = 7)
# Plot the payoff diagram
plot(stock_prices, put_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Profit")
# Add a line for the x-axis
abline(h = 0, col = "black")
dev.off()
# Calculate the payoff of the call option at expiration
call_payoff <- pmax(stock_prices - K, 0) - 10
pdf("call.pdf", width=12, height = 7)
# Plot the payoff diagram
plot(stock_prices, call_payoff, type = "l", col = "blue", lwd = 2,
xlab = "Stock Price at Expiration", ylab = "Profit")
# Add a line for the x-axis
abline(h = 0, col = "black")
dev.off()
nvidia_data <- read_csv("NVDA.csv")
nvidia_data <- read.csv("NVDA.csv")
# Step 3: Convert the Date column to Date type if it's not already
nvidia_data$Date <- as.Date(nvidia_data$Date, format = "%Y-%m-%d")
# Step 4: Plot the "Open" prices using base R
plot(nvidia_data$Date, nvidia_data$Open, type = "l", col = "blue", lwd = 2,
xlab = "Date", ylab = "Open Price",
main = "Nvidia Open Prices - Last Month")
# Step 4: Plot the "Open" prices using base R
plot(nvidia_data$Date, nvidia_data$Open, type = "l", col = "black", lwd = 2,
xlab = "Date", ylab = "Open Price",
main = "Nvidia Open Prices - Last Month")
august_01 <- as.Date("2024-08-01")
# Add the vertical line to the plot
abline(v = august_01, col = "red", lwd = 2, lty = 2)
# Step 3: Convert the Date column to Date type if it's not already
nvidia_data$Date <- as.Date(nvidia_data$Date, format = "%Y-%m-%d")
# Define the cutoff date
august_01 <- as.Date("2024-08-01")
# Step 4: Plot the "Open" prices using base R
plot(nvidia_data$Date, nvidia_data$Open, type = "n", col = "black", lwd = 2,
xlab = "Date", ylab = "Open Price",
main = "Nvidia Open Prices - Last Month")
# Add a solid line for dates before August 1
lines(nvidia_data$Date[nvidia_data$Date < august_01],
nvidia_data$Open[nvidia_data$Date < august_01],
col = "black", lwd = 2)
# Add a dashed line for dates from August 1 onwards
lines(nvidia_data$Date[nvidia_data$Date >= august_01],
nvidia_data$Open[nvidia_data$Date >= august_01],
col = "black", lwd = 2, lty = 2)
# Step 5: Add a vertical line at August 1st
abline(v = august_01, col = "red", lwd = 2, lty = 2)
# Add a solid line for dates before August 1
lines(nvidia_data$Date[nvidia_data$Date <= august_01],
nvidia_data$Open[nvidia_data$Date <= august_01],
col = "black", lwd = 2)
abline(v = august_15, col = "black", lwd = 2, lty = 2)
august_15 <- as.Date("2024-08-15")
abline(v = august_15, col = "black", lwd = 2, lty = 2)
nvidia_data <- read.csv("NVDA.csv")
# Step 3: Convert the Date column to Date type if it's not already
nvidia_data$Date <- as.Date(nvidia_data$Date, format = "%Y-%m-%d")
# Define the cutoff date
august_01 <- as.Date("2024-08-01")
# Step 4: Plot the "Open" prices using base R
plot(nvidia_data$Date, nvidia_data$Open, type = "n", col = "black", lwd = 2,
xlab = "Date", ylab = "Open Price")
# Add a solid line for dates before August 1
lines(nvidia_data$Date[nvidia_data$Date <= august_01],
nvidia_data$Open[nvidia_data$Date <= august_01],
col = "black", lwd = 2)
# Add a dashed line for dates from August 1 onwards
lines(nvidia_data$Date[nvidia_data$Date >= august_01],
nvidia_data$Open[nvidia_data$Date >= august_01],
col = "black", lwd = 2, lty = 2)
# Step 5: Add a vertical line at August 1st
abline(v = august_01, col = "black", lwd = 2, lty = 2)
# Step 5: Add a vertical line at August 1st
abline(v = august_01, col = "red", lwd = 1, lty = 2)
nvidia_data <- read.csv("NVDA.csv")
# Step 3: Convert the Date column to Date type if it's not already
nvidia_data$Date <- as.Date(nvidia_data$Date, format = "%Y-%m-%d")
# Define the cutoff date
august_01 <- as.Date("2024-08-01")
# Step 4: Plot the "Open" prices using base R
plot(nvidia_data$Date, nvidia_data$Open, type = "n", col = "black", lwd = 2,
xlab = "Date", ylab = "Open Price")
# Add a solid line for dates before August 1
lines(nvidia_data$Date[nvidia_data$Date <= august_01],
nvidia_data$Open[nvidia_data$Date <= august_01],
col = "black", lwd = 2)
# Add a dashed line for dates from August 1 onwards
lines(nvidia_data$Date[nvidia_data$Date >= august_01],
nvidia_data$Open[nvidia_data$Date >= august_01],
col = "black", lwd = 2, lty = 2)
# Step 5: Add a vertical line at August 1st
abline(v = august_01, col = "red", lwd = 1, lty = 2)
pdf("nvda.pdf", width = 12, height = 7)
# Step 4: Plot the "Open" prices using base R
plot(nvidia_data$Date, nvidia_data$Open, type = "n", col = "black", lwd = 2,
xlab = "Date", ylab = "Open Price")
# Add a solid line for dates before August 1
lines(nvidia_data$Date[nvidia_data$Date <= august_01],
nvidia_data$Open[nvidia_data$Date <= august_01],
col = "black", lwd = 2)
# Add a dashed line for dates from August 1 onwards
lines(nvidia_data$Date[nvidia_data$Date >= august_01],
nvidia_data$Open[nvidia_data$Date >= august_01],
col = "black", lwd = 2, lty = 2)
# Step 5: Add a vertical line at August 1st
abline(v = august_01, col = "red", lwd = 1, lty = 2)
dev.off()
